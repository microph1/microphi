"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-expression-statement, max-classes-per-file
const log_decorator_1 = require("./log.decorator");
log_decorator_1.setNamespace('myNamespace');
class TestClass {
    constructor() {
        // this.$l.d('constructing', this);
    }
}
__decorate([
    log_decorator_1.Log(),
    __metadata("design:type", Object)
], TestClass.prototype, "$l", void 0);
let instance;
log_decorator_1.setNamespace('ns2');
class TestClassNS2 {
    constructor() {
        this.$l.d('test 2nd ns');
    }
}
__decorate([
    log_decorator_1.Log(),
    __metadata("design:type", Object)
], TestClassNS2.prototype, "$l", void 0);
let instance2;
log_decorator_1.setNamespace('ns3');
class TestClassNS3 {
    constructor() {
        this.$l.d('test 3nd ns');
    }
    logAnObject() {
        return this.$l.d('this is an object', { a: 'a', b: 'b' });
    }
}
__decorate([
    log_decorator_1.Log(),
    __metadata("design:type", Object)
], TestClassNS3.prototype, "$l", void 0);
describe('@Log', () => {
    let instance3;
    beforeEach(() => {
        instance = new TestClass();
        instance2 = new TestClassNS2();
        instance3 = new TestClassNS3();
    });
    it('log decorator', () => {
        expect(instance).toBeTruthy();
        expect(instance2).toBeTruthy();
        expect(instance3).toBeTruthy();
    });
});
//# sourceMappingURL=log.decorator.spec.js.map